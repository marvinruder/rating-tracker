import "./utils/startup.js";

import { randomUUID } from "node:crypto";
import cookieParser from "cookie-parser";
import express from "express";
import { router } from "./utils/router.js";
import SwaggerUI from "swagger-ui-express";
import openapiDocument from "./openapi/index.js";
import * as OpenApiValidator from "express-openapi-validator";
import chalk from "chalk";
import responseTime from "response-time";
import { refreshSessionAndFetchUser, sessionTTLInSeconds } from "./redis/repositories/sessionRepository.js";
import path from "path";
import logger, { PREFIX_NODEJS, requestLogger } from "./utils/logger.js";
import { fileURLToPath } from "url";
import errorHandler from "./utils/errorHandler.js";
import setupCronJobs from "./utils/cron.js";
import dotenv from "dotenv";
dotenv.config();

// Import all controllers
import "./controllers/AuthController.js";
import "./controllers/FavoriteController.js";
import "./controllers/FetchController.js";
import "./controllers/ResourceController.js";
import "./controllers/SessionController.js";
import "./controllers/SessionController.js";
import "./controllers/StatusController.js";
import "./controllers/StockController.js";
import "./controllers/UserController.js";
import "./controllers/UserManagementController.js";
import "./controllers/WatchlistController.js";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * A token that is used to bypass authentication for requests sent by Cron jobs. It is generated randomly and changes on
 * every server restart.
 */
const bypassAuthenticationForInternalRequestsToken = randomUUID();

/**
 * A server, powered by Express.js. Responsible for serving static content and routing requests through various
 * middlewares and to routers.
 */
class Server {
  public app = express();
  public router = router;
}

/**
 * The server instance.
 */
export const server = new Server();

/**
 * Do not send information regarding the server's software and version for security reasons.
 */
server.app.disable("x-powered-by");

/**
 * The static content path, where the compiled and minified frontend and static resources are stored.
 */
const staticContentPath = path.join(__dirname, "..", "..", "public");

/* istanbul ignore next -- @preserve */ // This is not tested because it is only used in development servers
if (!process.env.AUTO_FETCH_SCHEDULE || process.env.NODE_ENV === "development") {
  server.app.use(
    "/assets/images/favicon",
    // Serve different favicons to easily distinguish between development and production servers.
    express.static(path.join(staticContentPath, "assets", "images", "favicon-dev"), {
      dotfiles: "ignore",
      lastModified: false,
      maxAge: "1 year",
    })
  );
}

/* istanbul ignore next -- @preserve */ // We do not have static resources in tests, so this middleware is not tested
server.app.use(
  express.static(staticContentPath, {
    dotfiles: "ignore",
    lastModified: false,
    maxAge: "1 year", // Cache static resources for 1 year
    setHeaders: (res, filepath) => {
      // Do not cache frontend files generated by Vite
      !filepath.startsWith(path.join(staticContentPath, "assets")) &&
        res.setHeader("Cache-Control", "public, max-age=0");
    },
  })
);

// Serve the SPA to any route not belonging to the API and not matching an existing file.
/* istanbul ignore next -- @preserve */ // The SPA index file does not exist during tests
server.app.get(/^(?!\/api).+/, (_, res) => {
  res.setHeader("Cache-Control", "public, max-age=0").sendFile(path.join(staticContentPath, "index.html"));
});

logger.info(PREFIX_NODEJS + `Serving static content from ${staticContentPath}`);
logger.info("");

server.app.use((_, res, next) => {
  // Do not cache API responses
  res.set("Cache-Control", "no-cache");
  next();
});

// Parses cookies and stores them in req.cookies
server.app.use(cookieParser());

// Parses JSON payload and stores it in the req.body object
server.app.use(express.json());

// Checks for user authentication via session cookie
server.app.use(async (req, res, next) => {
  if (req.cookies.authToken) {
    // If a session cookie is present
    try {
      // Refresh the cookie on the server and append the user to the response
      res.locals.user = await refreshSessionAndFetchUser(req.cookies.authToken);
      res.cookie("authToken", req.cookies.authToken, {
        maxAge: 1000 * sessionTTLInSeconds, // Refresh the cookie on the client
        httpOnly: true,
        secure: process.env.NODE_ENV !== "development", // allow plain HTTP in development
        sameSite: true,
      });
    } catch (e) {
      // If we encountered an error, the token was invalid, so we delete the cookie
      res.clearCookie("authToken");
    }
  }
  /* istanbul ignore next -- @preserve */ // We do not test Cron jobs
  if (req.cookies.bypassAuthenticationForInternalRequestsToken === bypassAuthenticationForInternalRequestsToken) {
    res.locals.userIsCron = true;
  }
  next();
});

// Host the OpenAPI UI
server.app.use("/api-docs", SwaggerUI.serve, SwaggerUI.setup(openapiDocument));

// Host the OpenAPI JSON configuration
server.app.get("/api-spec/v3", (_, res) => res.json(openapiDocument));

// Log all requests
server.app.use(responseTime(requestLogger));

// Validate requests and responses against the OpenAPI specification
server.app.use(
  OpenApiValidator.middleware({
    apiSpec: openapiDocument,
    validateRequests: true,
    validateResponses: true,
  })
);

// Route requests to controllers
server.app.use("/api", server.router);

// Handle errors
server.app.use(errorHandler);

// Setup Cron Jobs
process.env.AUTO_FETCH_SCHEDULE &&
  setupCronJobs(bypassAuthenticationForInternalRequestsToken, process.env.AUTO_FETCH_SCHEDULE);

export const listener = server.app.listen(process.env.PORT, () => {
  logger.info(
    chalk.whiteBright.bgHex("#339933")(" \uf898 ") +
      chalk.bgGrey.hex("#339933")("") +
      chalk.whiteBright.bgGrey(` \uf6ff ${process.env.PORT} `) +
      chalk.grey("") +
      " Listening…"
  );
  logger.info("");
});
