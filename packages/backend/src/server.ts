// eslint-disable-next-line import/order
import "./utils/startup";
// eslint-disable-next-line import/order
import "./db/migrate";

import { randomBytes } from "node:crypto";
import path from "path";

import { baseURL } from "@rating-tracker/commons";
import cookieParser from "cookie-parser";
import express from "express";
import * as OpenApiValidator from "express-openapi-validator";
import responseTime from "response-time";
import SwaggerUI from "swagger-ui-express";

// Import all controllers
import "./controllers/AccountController";
import "./controllers/AuthController";
import "./controllers/FavoritesController";
import "./controllers/FetchController";
import "./controllers/PortfoliosController";
import "./controllers/ProxyController";
import "./controllers/ResourcesController";
import "./controllers/SessionController";
import "./controllers/StatusController";
import "./controllers/StocksController";
import "./controllers/UsersController";
import "./controllers/WatchlistsController";
import OpenAPIDocumentation from "./openapi";
import { refreshSessionAndFetchUser, sessionTTLInSeconds } from "./redis/repositories/sessionRepository";
import setupCronJobs from "./utils/cron";
import { router } from "./utils/Endpoint";
import errorHandler from "./utils/errorHandler";
import logger, { logRequest } from "./utils/logger";

/**
 * A token that is used to bypass authentication for requests sent by Cron jobs. It is generated randomly and changes on
 * every server restart.
 */
const bypassAuthenticationForInternalRequestsToken = BigInt("0x" + randomBytes(64).toString("hex"))
  .toString(36)
  .padStart(100, "0");

/**
 * A server, powered by Express.js. Responsible for serving static content and routing requests through various
 * middlewares and to routers.
 */
class Server {
  public app = express();
  public router = router;
}

/**
 * The server instance.
 */
const server = new Server();

// Do not send information regarding the server's software and version for security reasons.
server.app.disable("x-powered-by");

// Trust the X-Forwarded-* headers set by exactly one reverse proxy.
server.app.set("trust proxy", 1);

/**
 * The static content path, where the compiled and minified frontend and static resources are stored.
 */
const staticContentPath = path.join(__dirname, "public");

/* c8 ignore next */ // This is not tested because it is only used in development servers
if (process.env.NODE_ENV === "development")
  server.app.use(
    "/assets/images/favicon",
    // Serve different favicons to easily distinguish between development and production servers.
    express.static(path.join(staticContentPath, "assets", "images", "favicon-dev"), {
      dotfiles: "ignore",
      lastModified: false,
      maxAge: "1 year",
    }),
  );

/* c8 ignore start */ // We do not have static resources in tests, so this middleware is not tested
server.app.use(
  express.static(staticContentPath, {
    dotfiles: "ignore",
    lastModified: false,
    maxAge: "1 year", // Cache static resources for 1 year
    setHeaders: (res, filepath) => {
      // Do not cache frontend files generated by Vite
      !filepath.startsWith(path.join(staticContentPath, "assets")) &&
        res.setHeader("Cache-Control", "public, max-age=0");
    },
  }),
);
/* c8 ignore stop */

// Serve the SPA to any route not belonging to the API and not matching an existing file.
/* c8 ignore start */ // The SPA index file does not exist during tests
server.app.get(/^(?!\/api).+/, (_, res) => {
  res.setHeader("Cache-Control", "public, max-age=0").sendFile(path.join(staticContentPath, "index.html"));
});
/* c8 ignore stop */

logger.info({ prefix: "nodejs" }, `Serving static content from ${staticContentPath}`);

server.app.use((_, res, next) => {
  // Do not cache API responses
  res.set("Cache-Control", "no-cache");
  next();
});

// Parses cookies and stores them in req.cookies
server.app.use(cookieParser());

// Checks for user authentication via session cookie
server.app.use(async (req, res, next) => {
  if (req.cookies.authToken) {
    // If a session cookie is present
    try {
      // Refresh the cookie on the server and append the user to the response
      res.locals.user = await refreshSessionAndFetchUser(req.cookies.authToken);
      res.cookie("authToken", req.cookies.authToken, {
        maxAge: 1000 * sessionTTLInSeconds, // Refresh the cookie on the client
        httpOnly: true,
        secure: true,
        sameSite: true,
      });
    } catch (e) {
      // If we encountered an error, the token was invalid, so we delete the cookie
      res.clearCookie("authToken");
    }
  }
  /* c8 ignore start */ // We do not test Cron jobs
  if (req.cookies.bypassAuthenticationForInternalRequestsToken === bypassAuthenticationForInternalRequestsToken)
    res.locals.userIsCron = true;
  /* c8 ignore stop */
  next();
});

// Host the OpenAPI UI
server.app.use(
  "/api-docs",
  SwaggerUI.serve,
  SwaggerUI.setup(
    OpenAPIDocumentation.openAPIDocument,
    undefined,
    undefined,
    undefined,
    "/assets/images/favicon-dev/favicon-192.png",
    undefined,
    "Rating Tracker API",
  ),
);

// Host the OpenAPI JSON configuration
server.app.get("/api-spec/v3", (_, res) => res.json(OpenAPIDocumentation.openAPIDocument));

// Log all requests
server.app.use(responseTime(logRequest));

// Validate requests and responses against the OpenAPI specification
server.app.use(
  OpenApiValidator.middleware({
    apiSpec: OpenAPIDocumentation.openAPIDocument,
    validateRequests: true,
    validateResponses: true,
  }),
);

// Route requests to controllers
server.app.use(baseURL, server.router);

// Handle errors
server.app.use(errorHandler);

// Setup Cron Jobs
process.env.AUTO_FETCH_SCHEDULE &&
  /* c8 ignore next */ // We do not test Cron jobs
  setupCronJobs(bypassAuthenticationForInternalRequestsToken, process.env.AUTO_FETCH_SCHEDULE);

export const listener = server.app.listen(Number(process.env.PORT), () => {
  logger.info({ prefix: ["nodejs", { port: process.env.PORT }] }, "Listeningâ€¦");
  process.env.EXIT_AFTER_READY && process.exit(0);
});
